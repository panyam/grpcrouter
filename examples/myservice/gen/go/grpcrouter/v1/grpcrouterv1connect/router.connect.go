// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: grpcrouter/v1/router.proto

package grpcrouterv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/panyam/grpcrouter/examples/myservice/gen/go/grpcrouter/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RouterName is the fully-qualified name of the Router service.
	RouterName = "grpcrouter.v1.Router"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RouterRegisterProcedure is the fully-qualified name of the Router's Register RPC.
	RouterRegisterProcedure = "/grpcrouter.v1.Router/Register"
	// RouterHealthCheckProcedure is the fully-qualified name of the Router's HealthCheck RPC.
	RouterHealthCheckProcedure = "/grpcrouter.v1.Router/HealthCheck"
	// RouterListInstancesProcedure is the fully-qualified name of the Router's ListInstances RPC.
	RouterListInstancesProcedure = "/grpcrouter.v1.Router/ListInstances"
)

// RouterClient is a client for the grpcrouter.v1.Router service.
type RouterClient interface {
	// Register a service instance with the router
	Register(context.Context) *connect.BidiStreamForClient[v1.RegisterRequest, v1.RegisterResponse]
	// Health check for registered instances
	HealthCheck(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error)
	// List registered instances
	ListInstances(context.Context, *connect.Request[v1.ListInstancesRequest]) (*connect.Response[v1.ListInstancesResponse], error)
}

// NewRouterClient constructs a client for the grpcrouter.v1.Router service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRouterClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RouterClient {
	baseURL = strings.TrimRight(baseURL, "/")
	routerMethods := v1.File_grpcrouter_v1_router_proto.Services().ByName("Router").Methods()
	return &routerClient{
		register: connect.NewClient[v1.RegisterRequest, v1.RegisterResponse](
			httpClient,
			baseURL+RouterRegisterProcedure,
			connect.WithSchema(routerMethods.ByName("Register")),
			connect.WithClientOptions(opts...),
		),
		healthCheck: connect.NewClient[v1.HealthCheckRequest, v1.HealthCheckResponse](
			httpClient,
			baseURL+RouterHealthCheckProcedure,
			connect.WithSchema(routerMethods.ByName("HealthCheck")),
			connect.WithClientOptions(opts...),
		),
		listInstances: connect.NewClient[v1.ListInstancesRequest, v1.ListInstancesResponse](
			httpClient,
			baseURL+RouterListInstancesProcedure,
			connect.WithSchema(routerMethods.ByName("ListInstances")),
			connect.WithClientOptions(opts...),
		),
	}
}

// routerClient implements RouterClient.
type routerClient struct {
	register      *connect.Client[v1.RegisterRequest, v1.RegisterResponse]
	healthCheck   *connect.Client[v1.HealthCheckRequest, v1.HealthCheckResponse]
	listInstances *connect.Client[v1.ListInstancesRequest, v1.ListInstancesResponse]
}

// Register calls grpcrouter.v1.Router.Register.
func (c *routerClient) Register(ctx context.Context) *connect.BidiStreamForClient[v1.RegisterRequest, v1.RegisterResponse] {
	return c.register.CallBidiStream(ctx)
}

// HealthCheck calls grpcrouter.v1.Router.HealthCheck.
func (c *routerClient) HealthCheck(ctx context.Context, req *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error) {
	return c.healthCheck.CallUnary(ctx, req)
}

// ListInstances calls grpcrouter.v1.Router.ListInstances.
func (c *routerClient) ListInstances(ctx context.Context, req *connect.Request[v1.ListInstancesRequest]) (*connect.Response[v1.ListInstancesResponse], error) {
	return c.listInstances.CallUnary(ctx, req)
}

// RouterHandler is an implementation of the grpcrouter.v1.Router service.
type RouterHandler interface {
	// Register a service instance with the router
	Register(context.Context, *connect.BidiStream[v1.RegisterRequest, v1.RegisterResponse]) error
	// Health check for registered instances
	HealthCheck(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error)
	// List registered instances
	ListInstances(context.Context, *connect.Request[v1.ListInstancesRequest]) (*connect.Response[v1.ListInstancesResponse], error)
}

// NewRouterHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRouterHandler(svc RouterHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	routerMethods := v1.File_grpcrouter_v1_router_proto.Services().ByName("Router").Methods()
	routerRegisterHandler := connect.NewBidiStreamHandler(
		RouterRegisterProcedure,
		svc.Register,
		connect.WithSchema(routerMethods.ByName("Register")),
		connect.WithHandlerOptions(opts...),
	)
	routerHealthCheckHandler := connect.NewUnaryHandler(
		RouterHealthCheckProcedure,
		svc.HealthCheck,
		connect.WithSchema(routerMethods.ByName("HealthCheck")),
		connect.WithHandlerOptions(opts...),
	)
	routerListInstancesHandler := connect.NewUnaryHandler(
		RouterListInstancesProcedure,
		svc.ListInstances,
		connect.WithSchema(routerMethods.ByName("ListInstances")),
		connect.WithHandlerOptions(opts...),
	)
	return "/grpcrouter.v1.Router/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RouterRegisterProcedure:
			routerRegisterHandler.ServeHTTP(w, r)
		case RouterHealthCheckProcedure:
			routerHealthCheckHandler.ServeHTTP(w, r)
		case RouterListInstancesProcedure:
			routerListInstancesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRouterHandler returns CodeUnimplemented from all methods.
type UnimplementedRouterHandler struct{}

func (UnimplementedRouterHandler) Register(context.Context, *connect.BidiStream[v1.RegisterRequest, v1.RegisterResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("grpcrouter.v1.Router.Register is not implemented"))
}

func (UnimplementedRouterHandler) HealthCheck(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("grpcrouter.v1.Router.HealthCheck is not implemented"))
}

func (UnimplementedRouterHandler) ListInstances(context.Context, *connect.Request[v1.ListInstancesRequest]) (*connect.Response[v1.ListInstancesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("grpcrouter.v1.Router.ListInstances is not implemented"))
}
