// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: myservice/v1/service.proto

package myservicev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/panyam/grpcrouter/examples/myservice/gen/go/myservice/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MyServiceName is the fully-qualified name of the MyService service.
	MyServiceName = "myservice.v1.MyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MyServiceMethod1Procedure is the fully-qualified name of the MyService's Method1 RPC.
	MyServiceMethod1Procedure = "/myservice.v1.MyService/Method1"
	// MyServiceMethod2Procedure is the fully-qualified name of the MyService's Method2 RPC.
	MyServiceMethod2Procedure = "/myservice.v1.MyService/Method2"
	// MyServiceMethod3Procedure is the fully-qualified name of the MyService's Method3 RPC.
	MyServiceMethod3Procedure = "/myservice.v1.MyService/Method3"
	// MyServiceStreamMethodProcedure is the fully-qualified name of the MyService's StreamMethod RPC.
	MyServiceStreamMethodProcedure = "/myservice.v1.MyService/StreamMethod"
)

// MyServiceClient is a client for the myservice.v1.MyService service.
type MyServiceClient interface {
	// Unary RPC
	Method1(context.Context, *connect.Request[v1.Method1Request]) (*connect.Response[v1.Method1Response], error)
	// Server streaming RPC
	Method2(context.Context, *connect.Request[v1.Method2Request]) (*connect.ServerStreamForClient[v1.Method2Response], error)
	// Client streaming RPC
	Method3(context.Context) *connect.ClientStreamForClient[v1.Method3Request, v1.Method3Response]
	// Bidirectional streaming RPC
	StreamMethod(context.Context) *connect.BidiStreamForClient[v1.StreamRequest, v1.StreamResponse]
}

// NewMyServiceClient constructs a client for the myservice.v1.MyService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMyServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	myServiceMethods := v1.File_myservice_v1_service_proto.Services().ByName("MyService").Methods()
	return &myServiceClient{
		method1: connect.NewClient[v1.Method1Request, v1.Method1Response](
			httpClient,
			baseURL+MyServiceMethod1Procedure,
			connect.WithSchema(myServiceMethods.ByName("Method1")),
			connect.WithClientOptions(opts...),
		),
		method2: connect.NewClient[v1.Method2Request, v1.Method2Response](
			httpClient,
			baseURL+MyServiceMethod2Procedure,
			connect.WithSchema(myServiceMethods.ByName("Method2")),
			connect.WithClientOptions(opts...),
		),
		method3: connect.NewClient[v1.Method3Request, v1.Method3Response](
			httpClient,
			baseURL+MyServiceMethod3Procedure,
			connect.WithSchema(myServiceMethods.ByName("Method3")),
			connect.WithClientOptions(opts...),
		),
		streamMethod: connect.NewClient[v1.StreamRequest, v1.StreamResponse](
			httpClient,
			baseURL+MyServiceStreamMethodProcedure,
			connect.WithSchema(myServiceMethods.ByName("StreamMethod")),
			connect.WithClientOptions(opts...),
		),
	}
}

// myServiceClient implements MyServiceClient.
type myServiceClient struct {
	method1      *connect.Client[v1.Method1Request, v1.Method1Response]
	method2      *connect.Client[v1.Method2Request, v1.Method2Response]
	method3      *connect.Client[v1.Method3Request, v1.Method3Response]
	streamMethod *connect.Client[v1.StreamRequest, v1.StreamResponse]
}

// Method1 calls myservice.v1.MyService.Method1.
func (c *myServiceClient) Method1(ctx context.Context, req *connect.Request[v1.Method1Request]) (*connect.Response[v1.Method1Response], error) {
	return c.method1.CallUnary(ctx, req)
}

// Method2 calls myservice.v1.MyService.Method2.
func (c *myServiceClient) Method2(ctx context.Context, req *connect.Request[v1.Method2Request]) (*connect.ServerStreamForClient[v1.Method2Response], error) {
	return c.method2.CallServerStream(ctx, req)
}

// Method3 calls myservice.v1.MyService.Method3.
func (c *myServiceClient) Method3(ctx context.Context) *connect.ClientStreamForClient[v1.Method3Request, v1.Method3Response] {
	return c.method3.CallClientStream(ctx)
}

// StreamMethod calls myservice.v1.MyService.StreamMethod.
func (c *myServiceClient) StreamMethod(ctx context.Context) *connect.BidiStreamForClient[v1.StreamRequest, v1.StreamResponse] {
	return c.streamMethod.CallBidiStream(ctx)
}

// MyServiceHandler is an implementation of the myservice.v1.MyService service.
type MyServiceHandler interface {
	// Unary RPC
	Method1(context.Context, *connect.Request[v1.Method1Request]) (*connect.Response[v1.Method1Response], error)
	// Server streaming RPC
	Method2(context.Context, *connect.Request[v1.Method2Request], *connect.ServerStream[v1.Method2Response]) error
	// Client streaming RPC
	Method3(context.Context, *connect.ClientStream[v1.Method3Request]) (*connect.Response[v1.Method3Response], error)
	// Bidirectional streaming RPC
	StreamMethod(context.Context, *connect.BidiStream[v1.StreamRequest, v1.StreamResponse]) error
}

// NewMyServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMyServiceHandler(svc MyServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	myServiceMethods := v1.File_myservice_v1_service_proto.Services().ByName("MyService").Methods()
	myServiceMethod1Handler := connect.NewUnaryHandler(
		MyServiceMethod1Procedure,
		svc.Method1,
		connect.WithSchema(myServiceMethods.ByName("Method1")),
		connect.WithHandlerOptions(opts...),
	)
	myServiceMethod2Handler := connect.NewServerStreamHandler(
		MyServiceMethod2Procedure,
		svc.Method2,
		connect.WithSchema(myServiceMethods.ByName("Method2")),
		connect.WithHandlerOptions(opts...),
	)
	myServiceMethod3Handler := connect.NewClientStreamHandler(
		MyServiceMethod3Procedure,
		svc.Method3,
		connect.WithSchema(myServiceMethods.ByName("Method3")),
		connect.WithHandlerOptions(opts...),
	)
	myServiceStreamMethodHandler := connect.NewBidiStreamHandler(
		MyServiceStreamMethodProcedure,
		svc.StreamMethod,
		connect.WithSchema(myServiceMethods.ByName("StreamMethod")),
		connect.WithHandlerOptions(opts...),
	)
	return "/myservice.v1.MyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MyServiceMethod1Procedure:
			myServiceMethod1Handler.ServeHTTP(w, r)
		case MyServiceMethod2Procedure:
			myServiceMethod2Handler.ServeHTTP(w, r)
		case MyServiceMethod3Procedure:
			myServiceMethod3Handler.ServeHTTP(w, r)
		case MyServiceStreamMethodProcedure:
			myServiceStreamMethodHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMyServiceHandler struct{}

func (UnimplementedMyServiceHandler) Method1(context.Context, *connect.Request[v1.Method1Request]) (*connect.Response[v1.Method1Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("myservice.v1.MyService.Method1 is not implemented"))
}

func (UnimplementedMyServiceHandler) Method2(context.Context, *connect.Request[v1.Method2Request], *connect.ServerStream[v1.Method2Response]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("myservice.v1.MyService.Method2 is not implemented"))
}

func (UnimplementedMyServiceHandler) Method3(context.Context, *connect.ClientStream[v1.Method3Request]) (*connect.Response[v1.Method3Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("myservice.v1.MyService.Method3 is not implemented"))
}

func (UnimplementedMyServiceHandler) StreamMethod(context.Context, *connect.BidiStream[v1.StreamRequest, v1.StreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("myservice.v1.MyService.StreamMethod is not implemented"))
}
