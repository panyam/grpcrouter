// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: myservice/v1/service_router.proto

package v1

import (
	v1 "github.com/panyam/grpcrouter/proto/gen/go/grpcrouter/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MyServiceRegisterRequest contains registration and RPC response messages
type MyServiceRegisterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Request:
	//
	//	*MyServiceRegisterRequest_InstanceInfo
	//	*MyServiceRegisterRequest_Heartbeat
	//	*MyServiceRegisterRequest_Unregister
	//	*MyServiceRegisterRequest_RpcResponse
	Request       isMyServiceRegisterRequest_Request `protobuf_oneof:"request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MyServiceRegisterRequest) Reset() {
	*x = MyServiceRegisterRequest{}
	mi := &file_myservice_v1_service_router_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MyServiceRegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyServiceRegisterRequest) ProtoMessage() {}

func (x *MyServiceRegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_myservice_v1_service_router_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyServiceRegisterRequest.ProtoReflect.Descriptor instead.
func (*MyServiceRegisterRequest) Descriptor() ([]byte, []int) {
	return file_myservice_v1_service_router_proto_rawDescGZIP(), []int{0}
}

func (x *MyServiceRegisterRequest) GetRequest() isMyServiceRegisterRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *MyServiceRegisterRequest) GetInstanceInfo() *v1.InstanceInfo {
	if x != nil {
		if x, ok := x.Request.(*MyServiceRegisterRequest_InstanceInfo); ok {
			return x.InstanceInfo
		}
	}
	return nil
}

func (x *MyServiceRegisterRequest) GetHeartbeat() *v1.Heartbeat {
	if x != nil {
		if x, ok := x.Request.(*MyServiceRegisterRequest_Heartbeat); ok {
			return x.Heartbeat
		}
	}
	return nil
}

func (x *MyServiceRegisterRequest) GetUnregister() *v1.UnregisterRequest {
	if x != nil {
		if x, ok := x.Request.(*MyServiceRegisterRequest_Unregister); ok {
			return x.Unregister
		}
	}
	return nil
}

func (x *MyServiceRegisterRequest) GetRpcResponse() *MyServiceRpcResponse {
	if x != nil {
		if x, ok := x.Request.(*MyServiceRegisterRequest_RpcResponse); ok {
			return x.RpcResponse
		}
	}
	return nil
}

type isMyServiceRegisterRequest_Request interface {
	isMyServiceRegisterRequest_Request()
}

type MyServiceRegisterRequest_InstanceInfo struct {
	// Standard registration messages
	InstanceInfo *v1.InstanceInfo `protobuf:"bytes,1,opt,name=instance_info,json=instanceInfo,proto3,oneof"`
}

type MyServiceRegisterRequest_Heartbeat struct {
	Heartbeat *v1.Heartbeat `protobuf:"bytes,2,opt,name=heartbeat,proto3,oneof"`
}

type MyServiceRegisterRequest_Unregister struct {
	Unregister *v1.UnregisterRequest `protobuf:"bytes,3,opt,name=unregister,proto3,oneof"`
}

type MyServiceRegisterRequest_RpcResponse struct {
	// Service-specific RPC response
	RpcResponse *MyServiceRpcResponse `protobuf:"bytes,4,opt,name=rpc_response,json=rpcResponse,proto3,oneof"`
}

func (*MyServiceRegisterRequest_InstanceInfo) isMyServiceRegisterRequest_Request() {}

func (*MyServiceRegisterRequest_Heartbeat) isMyServiceRegisterRequest_Request() {}

func (*MyServiceRegisterRequest_Unregister) isMyServiceRegisterRequest_Request() {}

func (*MyServiceRegisterRequest_RpcResponse) isMyServiceRegisterRequest_Request() {}

// MyServiceRegisterResponse contains registration acks and RPC calls
type MyServiceRegisterResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*MyServiceRegisterResponse_Ack
	//	*MyServiceRegisterResponse_Error
	//	*MyServiceRegisterResponse_RpcCall
	Response      isMyServiceRegisterResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MyServiceRegisterResponse) Reset() {
	*x = MyServiceRegisterResponse{}
	mi := &file_myservice_v1_service_router_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MyServiceRegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyServiceRegisterResponse) ProtoMessage() {}

func (x *MyServiceRegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_myservice_v1_service_router_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyServiceRegisterResponse.ProtoReflect.Descriptor instead.
func (*MyServiceRegisterResponse) Descriptor() ([]byte, []int) {
	return file_myservice_v1_service_router_proto_rawDescGZIP(), []int{1}
}

func (x *MyServiceRegisterResponse) GetResponse() isMyServiceRegisterResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *MyServiceRegisterResponse) GetAck() *v1.RegistrationAck {
	if x != nil {
		if x, ok := x.Response.(*MyServiceRegisterResponse_Ack); ok {
			return x.Ack
		}
	}
	return nil
}

func (x *MyServiceRegisterResponse) GetError() *v1.ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*MyServiceRegisterResponse_Error); ok {
			return x.Error
		}
	}
	return nil
}

func (x *MyServiceRegisterResponse) GetRpcCall() *MyServiceRpcCall {
	if x != nil {
		if x, ok := x.Response.(*MyServiceRegisterResponse_RpcCall); ok {
			return x.RpcCall
		}
	}
	return nil
}

type isMyServiceRegisterResponse_Response interface {
	isMyServiceRegisterResponse_Response()
}

type MyServiceRegisterResponse_Ack struct {
	// Standard registration messages
	Ack *v1.RegistrationAck `protobuf:"bytes,1,opt,name=ack,proto3,oneof"`
}

type MyServiceRegisterResponse_Error struct {
	Error *v1.ErrorResponse `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

type MyServiceRegisterResponse_RpcCall struct {
	// Service-specific RPC call
	RpcCall *MyServiceRpcCall `protobuf:"bytes,3,opt,name=rpc_call,json=rpcCall,proto3,oneof"`
}

func (*MyServiceRegisterResponse_Ack) isMyServiceRegisterResponse_Response() {}

func (*MyServiceRegisterResponse_Error) isMyServiceRegisterResponse_Response() {}

func (*MyServiceRegisterResponse_RpcCall) isMyServiceRegisterResponse_Response() {}

// MyServiceRpcCall contains typed RPC requests for MyService methods
type MyServiceRpcCall struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	RequestId  string                 `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Method     string                 `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	MethodType v1.RpcMethodType       `protobuf:"varint,3,opt,name=method_type,json=methodType,proto3,enum=grpcrouter.v1.RpcMethodType" json:"method_type,omitempty"`
	Metadata   map[string]string      `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Types that are valid to be assigned to Request:
	//
	//	*MyServiceRpcCall_Method1
	//	*MyServiceRpcCall_Method2
	//	*MyServiceRpcCall_Method3
	//	*MyServiceRpcCall_StreamMethod
	Request       isMyServiceRpcCall_Request `protobuf_oneof:"request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MyServiceRpcCall) Reset() {
	*x = MyServiceRpcCall{}
	mi := &file_myservice_v1_service_router_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MyServiceRpcCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyServiceRpcCall) ProtoMessage() {}

func (x *MyServiceRpcCall) ProtoReflect() protoreflect.Message {
	mi := &file_myservice_v1_service_router_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyServiceRpcCall.ProtoReflect.Descriptor instead.
func (*MyServiceRpcCall) Descriptor() ([]byte, []int) {
	return file_myservice_v1_service_router_proto_rawDescGZIP(), []int{2}
}

func (x *MyServiceRpcCall) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *MyServiceRpcCall) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *MyServiceRpcCall) GetMethodType() v1.RpcMethodType {
	if x != nil {
		return x.MethodType
	}
	return v1.RpcMethodType(0)
}

func (x *MyServiceRpcCall) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *MyServiceRpcCall) GetRequest() isMyServiceRpcCall_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *MyServiceRpcCall) GetMethod1() *Method1Request {
	if x != nil {
		if x, ok := x.Request.(*MyServiceRpcCall_Method1); ok {
			return x.Method1
		}
	}
	return nil
}

func (x *MyServiceRpcCall) GetMethod2() *Method2Request {
	if x != nil {
		if x, ok := x.Request.(*MyServiceRpcCall_Method2); ok {
			return x.Method2
		}
	}
	return nil
}

func (x *MyServiceRpcCall) GetMethod3() *Method3Request {
	if x != nil {
		if x, ok := x.Request.(*MyServiceRpcCall_Method3); ok {
			return x.Method3
		}
	}
	return nil
}

func (x *MyServiceRpcCall) GetStreamMethod() *StreamMethodRequest {
	if x != nil {
		if x, ok := x.Request.(*MyServiceRpcCall_StreamMethod); ok {
			return x.StreamMethod
		}
	}
	return nil
}

type isMyServiceRpcCall_Request interface {
	isMyServiceRpcCall_Request()
}

type MyServiceRpcCall_Method1 struct {
	Method1 *Method1Request `protobuf:"bytes,10,opt,name=method1,proto3,oneof"`
}

type MyServiceRpcCall_Method2 struct {
	Method2 *Method2Request `protobuf:"bytes,11,opt,name=method2,proto3,oneof"`
}

type MyServiceRpcCall_Method3 struct {
	Method3 *Method3Request `protobuf:"bytes,12,opt,name=method3,proto3,oneof"`
}

type MyServiceRpcCall_StreamMethod struct {
	StreamMethod *StreamMethodRequest `protobuf:"bytes,13,opt,name=stream_method,json=streamMethod,proto3,oneof"`
}

func (*MyServiceRpcCall_Method1) isMyServiceRpcCall_Request() {}

func (*MyServiceRpcCall_Method2) isMyServiceRpcCall_Request() {}

func (*MyServiceRpcCall_Method3) isMyServiceRpcCall_Request() {}

func (*MyServiceRpcCall_StreamMethod) isMyServiceRpcCall_Request() {}

// MyServiceRpcResponse contains typed RPC responses for MyService methods
type MyServiceRpcResponse struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	RequestId string                 `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Metadata  map[string]string      `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Status    *v1.RpcStatus          `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// Types that are valid to be assigned to Response:
	//
	//	*MyServiceRpcResponse_Method1
	//	*MyServiceRpcResponse_Method2
	//	*MyServiceRpcResponse_Method3
	//	*MyServiceRpcResponse_StreamMethod
	Response      isMyServiceRpcResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MyServiceRpcResponse) Reset() {
	*x = MyServiceRpcResponse{}
	mi := &file_myservice_v1_service_router_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MyServiceRpcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyServiceRpcResponse) ProtoMessage() {}

func (x *MyServiceRpcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_myservice_v1_service_router_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyServiceRpcResponse.ProtoReflect.Descriptor instead.
func (*MyServiceRpcResponse) Descriptor() ([]byte, []int) {
	return file_myservice_v1_service_router_proto_rawDescGZIP(), []int{3}
}

func (x *MyServiceRpcResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *MyServiceRpcResponse) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *MyServiceRpcResponse) GetStatus() *v1.RpcStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MyServiceRpcResponse) GetResponse() isMyServiceRpcResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *MyServiceRpcResponse) GetMethod1() *Method1Response {
	if x != nil {
		if x, ok := x.Response.(*MyServiceRpcResponse_Method1); ok {
			return x.Method1
		}
	}
	return nil
}

func (x *MyServiceRpcResponse) GetMethod2() *Method2Response {
	if x != nil {
		if x, ok := x.Response.(*MyServiceRpcResponse_Method2); ok {
			return x.Method2
		}
	}
	return nil
}

func (x *MyServiceRpcResponse) GetMethod3() *Method3Response {
	if x != nil {
		if x, ok := x.Response.(*MyServiceRpcResponse_Method3); ok {
			return x.Method3
		}
	}
	return nil
}

func (x *MyServiceRpcResponse) GetStreamMethod() *StreamMethodResponse {
	if x != nil {
		if x, ok := x.Response.(*MyServiceRpcResponse_StreamMethod); ok {
			return x.StreamMethod
		}
	}
	return nil
}

type isMyServiceRpcResponse_Response interface {
	isMyServiceRpcResponse_Response()
}

type MyServiceRpcResponse_Method1 struct {
	Method1 *Method1Response `protobuf:"bytes,10,opt,name=method1,proto3,oneof"`
}

type MyServiceRpcResponse_Method2 struct {
	Method2 *Method2Response `protobuf:"bytes,11,opt,name=method2,proto3,oneof"`
}

type MyServiceRpcResponse_Method3 struct {
	Method3 *Method3Response `protobuf:"bytes,12,opt,name=method3,proto3,oneof"`
}

type MyServiceRpcResponse_StreamMethod struct {
	StreamMethod *StreamMethodResponse `protobuf:"bytes,13,opt,name=stream_method,json=streamMethod,proto3,oneof"`
}

func (*MyServiceRpcResponse_Method1) isMyServiceRpcResponse_Response() {}

func (*MyServiceRpcResponse_Method2) isMyServiceRpcResponse_Response() {}

func (*MyServiceRpcResponse_Method3) isMyServiceRpcResponse_Response() {}

func (*MyServiceRpcResponse_StreamMethod) isMyServiceRpcResponse_Response() {}

var File_myservice_v1_service_router_proto protoreflect.FileDescriptor

const file_myservice_v1_service_router_proto_rawDesc = "" +
	"\n" +
	"!myservice/v1/service_router.proto\x12\fmyservice.v1\x1a\x1agrpcrouter/v1/router.proto\x1a\x1amyservice/v1/service.proto\"\xb0\x02\n" +
	"\x18MyServiceRegisterRequest\x12B\n" +
	"\rinstance_info\x18\x01 \x01(\v2\x1b.grpcrouter.v1.InstanceInfoH\x00R\finstanceInfo\x128\n" +
	"\theartbeat\x18\x02 \x01(\v2\x18.grpcrouter.v1.HeartbeatH\x00R\theartbeat\x12B\n" +
	"\n" +
	"unregister\x18\x03 \x01(\v2 .grpcrouter.v1.UnregisterRequestH\x00R\n" +
	"unregister\x12G\n" +
	"\frpc_response\x18\x04 \x01(\v2\".myservice.v1.MyServiceRpcResponseH\x00R\vrpcResponseB\t\n" +
	"\arequest\"\xce\x01\n" +
	"\x19MyServiceRegisterResponse\x122\n" +
	"\x03ack\x18\x01 \x01(\v2\x1e.grpcrouter.v1.RegistrationAckH\x00R\x03ack\x124\n" +
	"\x05error\x18\x02 \x01(\v2\x1c.grpcrouter.v1.ErrorResponseH\x00R\x05error\x12;\n" +
	"\brpc_call\x18\x03 \x01(\v2\x1e.myservice.v1.MyServiceRpcCallH\x00R\arpcCallB\n" +
	"\n" +
	"\bresponse\"\x92\x04\n" +
	"\x10MyServiceRpcCall\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\tR\trequestId\x12\x16\n" +
	"\x06method\x18\x02 \x01(\tR\x06method\x12=\n" +
	"\vmethod_type\x18\x03 \x01(\x0e2\x1c.grpcrouter.v1.RpcMethodTypeR\n" +
	"methodType\x12H\n" +
	"\bmetadata\x18\x04 \x03(\v2,.myservice.v1.MyServiceRpcCall.MetadataEntryR\bmetadata\x128\n" +
	"\amethod1\x18\n" +
	" \x01(\v2\x1c.myservice.v1.Method1RequestH\x00R\amethod1\x128\n" +
	"\amethod2\x18\v \x01(\v2\x1c.myservice.v1.Method2RequestH\x00R\amethod2\x128\n" +
	"\amethod3\x18\f \x01(\v2\x1c.myservice.v1.Method3RequestH\x00R\amethod3\x12H\n" +
	"\rstream_method\x18\r \x01(\v2!.myservice.v1.StreamMethodRequestH\x00R\fstreamMethod\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\t\n" +
	"\arequest\"\xfa\x03\n" +
	"\x14MyServiceRpcResponse\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\tR\trequestId\x12L\n" +
	"\bmetadata\x18\x02 \x03(\v20.myservice.v1.MyServiceRpcResponse.MetadataEntryR\bmetadata\x120\n" +
	"\x06status\x18\x03 \x01(\v2\x18.grpcrouter.v1.RpcStatusR\x06status\x129\n" +
	"\amethod1\x18\n" +
	" \x01(\v2\x1d.myservice.v1.Method1ResponseH\x00R\amethod1\x129\n" +
	"\amethod2\x18\v \x01(\v2\x1d.myservice.v1.Method2ResponseH\x00R\amethod2\x129\n" +
	"\amethod3\x18\f \x01(\v2\x1d.myservice.v1.Method3ResponseH\x00R\amethod3\x12I\n" +
	"\rstream_method\x18\r \x01(\v2\".myservice.v1.StreamMethodResponseH\x00R\fstreamMethod\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\n" +
	"\n" +
	"\bresponse2\xa9\x03\n" +
	"\x0fMyServiceRouter\x12F\n" +
	"\aMethod1\x12\x1c.myservice.v1.Method1Request\x1a\x1d.myservice.v1.Method1Response\x12H\n" +
	"\aMethod2\x12\x1c.myservice.v1.Method2Request\x1a\x1d.myservice.v1.Method2Response0\x01\x12H\n" +
	"\aMethod3\x12\x1c.myservice.v1.Method3Request\x1a\x1d.myservice.v1.Method3Response(\x01\x12Y\n" +
	"\fStreamMethod\x12!.myservice.v1.StreamMethodRequest\x1a\".myservice.v1.StreamMethodResponse(\x010\x01\x12_\n" +
	"\bRegister\x12&.myservice.v1.MyServiceRegisterRequest\x1a'.myservice.v1.MyServiceRegisterResponse(\x010\x01B\xab\x01\n" +
	"\x10com.myservice.v1B\x12ServiceRouterProtoP\x01Z2github.com/panyam/grpcrouter/examples/myservice/v1\xa2\x02\x03MXX\xaa\x02\fMyservice.V1\xca\x02\fMyservice\\V1\xe2\x02\x18Myservice\\V1\\GPBMetadata\xea\x02\rMyservice::V1b\x06proto3"

var (
	file_myservice_v1_service_router_proto_rawDescOnce sync.Once
	file_myservice_v1_service_router_proto_rawDescData []byte
)

func file_myservice_v1_service_router_proto_rawDescGZIP() []byte {
	file_myservice_v1_service_router_proto_rawDescOnce.Do(func() {
		file_myservice_v1_service_router_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_myservice_v1_service_router_proto_rawDesc), len(file_myservice_v1_service_router_proto_rawDesc)))
	})
	return file_myservice_v1_service_router_proto_rawDescData
}

var file_myservice_v1_service_router_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_myservice_v1_service_router_proto_goTypes = []any{
	(*MyServiceRegisterRequest)(nil),  // 0: myservice.v1.MyServiceRegisterRequest
	(*MyServiceRegisterResponse)(nil), // 1: myservice.v1.MyServiceRegisterResponse
	(*MyServiceRpcCall)(nil),          // 2: myservice.v1.MyServiceRpcCall
	(*MyServiceRpcResponse)(nil),      // 3: myservice.v1.MyServiceRpcResponse
	nil,                               // 4: myservice.v1.MyServiceRpcCall.MetadataEntry
	nil,                               // 5: myservice.v1.MyServiceRpcResponse.MetadataEntry
	(*v1.InstanceInfo)(nil),           // 6: grpcrouter.v1.InstanceInfo
	(*v1.Heartbeat)(nil),              // 7: grpcrouter.v1.Heartbeat
	(*v1.UnregisterRequest)(nil),      // 8: grpcrouter.v1.UnregisterRequest
	(*v1.RegistrationAck)(nil),        // 9: grpcrouter.v1.RegistrationAck
	(*v1.ErrorResponse)(nil),          // 10: grpcrouter.v1.ErrorResponse
	(v1.RpcMethodType)(0),             // 11: grpcrouter.v1.RpcMethodType
	(*Method1Request)(nil),            // 12: myservice.v1.Method1Request
	(*Method2Request)(nil),            // 13: myservice.v1.Method2Request
	(*Method3Request)(nil),            // 14: myservice.v1.Method3Request
	(*StreamMethodRequest)(nil),       // 15: myservice.v1.StreamMethodRequest
	(*v1.RpcStatus)(nil),              // 16: grpcrouter.v1.RpcStatus
	(*Method1Response)(nil),           // 17: myservice.v1.Method1Response
	(*Method2Response)(nil),           // 18: myservice.v1.Method2Response
	(*Method3Response)(nil),           // 19: myservice.v1.Method3Response
	(*StreamMethodResponse)(nil),      // 20: myservice.v1.StreamMethodResponse
}
var file_myservice_v1_service_router_proto_depIdxs = []int32{
	6,  // 0: myservice.v1.MyServiceRegisterRequest.instance_info:type_name -> grpcrouter.v1.InstanceInfo
	7,  // 1: myservice.v1.MyServiceRegisterRequest.heartbeat:type_name -> grpcrouter.v1.Heartbeat
	8,  // 2: myservice.v1.MyServiceRegisterRequest.unregister:type_name -> grpcrouter.v1.UnregisterRequest
	3,  // 3: myservice.v1.MyServiceRegisterRequest.rpc_response:type_name -> myservice.v1.MyServiceRpcResponse
	9,  // 4: myservice.v1.MyServiceRegisterResponse.ack:type_name -> grpcrouter.v1.RegistrationAck
	10, // 5: myservice.v1.MyServiceRegisterResponse.error:type_name -> grpcrouter.v1.ErrorResponse
	2,  // 6: myservice.v1.MyServiceRegisterResponse.rpc_call:type_name -> myservice.v1.MyServiceRpcCall
	11, // 7: myservice.v1.MyServiceRpcCall.method_type:type_name -> grpcrouter.v1.RpcMethodType
	4,  // 8: myservice.v1.MyServiceRpcCall.metadata:type_name -> myservice.v1.MyServiceRpcCall.MetadataEntry
	12, // 9: myservice.v1.MyServiceRpcCall.method1:type_name -> myservice.v1.Method1Request
	13, // 10: myservice.v1.MyServiceRpcCall.method2:type_name -> myservice.v1.Method2Request
	14, // 11: myservice.v1.MyServiceRpcCall.method3:type_name -> myservice.v1.Method3Request
	15, // 12: myservice.v1.MyServiceRpcCall.stream_method:type_name -> myservice.v1.StreamMethodRequest
	5,  // 13: myservice.v1.MyServiceRpcResponse.metadata:type_name -> myservice.v1.MyServiceRpcResponse.MetadataEntry
	16, // 14: myservice.v1.MyServiceRpcResponse.status:type_name -> grpcrouter.v1.RpcStatus
	17, // 15: myservice.v1.MyServiceRpcResponse.method1:type_name -> myservice.v1.Method1Response
	18, // 16: myservice.v1.MyServiceRpcResponse.method2:type_name -> myservice.v1.Method2Response
	19, // 17: myservice.v1.MyServiceRpcResponse.method3:type_name -> myservice.v1.Method3Response
	20, // 18: myservice.v1.MyServiceRpcResponse.stream_method:type_name -> myservice.v1.StreamMethodResponse
	12, // 19: myservice.v1.MyServiceRouter.Method1:input_type -> myservice.v1.Method1Request
	13, // 20: myservice.v1.MyServiceRouter.Method2:input_type -> myservice.v1.Method2Request
	14, // 21: myservice.v1.MyServiceRouter.Method3:input_type -> myservice.v1.Method3Request
	15, // 22: myservice.v1.MyServiceRouter.StreamMethod:input_type -> myservice.v1.StreamMethodRequest
	0,  // 23: myservice.v1.MyServiceRouter.Register:input_type -> myservice.v1.MyServiceRegisterRequest
	17, // 24: myservice.v1.MyServiceRouter.Method1:output_type -> myservice.v1.Method1Response
	18, // 25: myservice.v1.MyServiceRouter.Method2:output_type -> myservice.v1.Method2Response
	19, // 26: myservice.v1.MyServiceRouter.Method3:output_type -> myservice.v1.Method3Response
	20, // 27: myservice.v1.MyServiceRouter.StreamMethod:output_type -> myservice.v1.StreamMethodResponse
	1,  // 28: myservice.v1.MyServiceRouter.Register:output_type -> myservice.v1.MyServiceRegisterResponse
	24, // [24:29] is the sub-list for method output_type
	19, // [19:24] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_myservice_v1_service_router_proto_init() }
func file_myservice_v1_service_router_proto_init() {
	if File_myservice_v1_service_router_proto != nil {
		return
	}
	file_myservice_v1_service_proto_init()
	file_myservice_v1_service_router_proto_msgTypes[0].OneofWrappers = []any{
		(*MyServiceRegisterRequest_InstanceInfo)(nil),
		(*MyServiceRegisterRequest_Heartbeat)(nil),
		(*MyServiceRegisterRequest_Unregister)(nil),
		(*MyServiceRegisterRequest_RpcResponse)(nil),
	}
	file_myservice_v1_service_router_proto_msgTypes[1].OneofWrappers = []any{
		(*MyServiceRegisterResponse_Ack)(nil),
		(*MyServiceRegisterResponse_Error)(nil),
		(*MyServiceRegisterResponse_RpcCall)(nil),
	}
	file_myservice_v1_service_router_proto_msgTypes[2].OneofWrappers = []any{
		(*MyServiceRpcCall_Method1)(nil),
		(*MyServiceRpcCall_Method2)(nil),
		(*MyServiceRpcCall_Method3)(nil),
		(*MyServiceRpcCall_StreamMethod)(nil),
	}
	file_myservice_v1_service_router_proto_msgTypes[3].OneofWrappers = []any{
		(*MyServiceRpcResponse_Method1)(nil),
		(*MyServiceRpcResponse_Method2)(nil),
		(*MyServiceRpcResponse_Method3)(nil),
		(*MyServiceRpcResponse_StreamMethod)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_myservice_v1_service_router_proto_rawDesc), len(file_myservice_v1_service_router_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_myservice_v1_service_router_proto_goTypes,
		DependencyIndexes: file_myservice_v1_service_router_proto_depIdxs,
		MessageInfos:      file_myservice_v1_service_router_proto_msgTypes,
	}.Build()
	File_myservice_v1_service_router_proto = out.File
	file_myservice_v1_service_router_proto_goTypes = nil
	file_myservice_v1_service_router_proto_depIdxs = nil
}
