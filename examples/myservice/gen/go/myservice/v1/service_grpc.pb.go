// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: myservice/v1/service.proto

package myservicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MyService_Method1_FullMethodName      = "/myservice.v1.MyService/Method1"
	MyService_Method2_FullMethodName      = "/myservice.v1.MyService/Method2"
	MyService_Method3_FullMethodName      = "/myservice.v1.MyService/Method3"
	MyService_StreamMethod_FullMethodName = "/myservice.v1.MyService/StreamMethod"
)

// MyServiceClient is the client API for MyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Example service that will be routed through the router
type MyServiceClient interface {
	// Unary RPC
	Method1(ctx context.Context, in *Method1Request, opts ...grpc.CallOption) (*Method1Response, error)
	// Server streaming RPC
	Method2(ctx context.Context, in *Method2Request, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Method2Response], error)
	// Client streaming RPC
	Method3(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Method3Request, Method3Response], error)
	// Bidirectional streaming RPC
	StreamMethod(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamMethodRequest, StreamMethodResponse], error)
}

type myServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMyServiceClient(cc grpc.ClientConnInterface) MyServiceClient {
	return &myServiceClient{cc}
}

func (c *myServiceClient) Method1(ctx context.Context, in *Method1Request, opts ...grpc.CallOption) (*Method1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Method1Response)
	err := c.cc.Invoke(ctx, MyService_Method1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) Method2(ctx context.Context, in *Method2Request, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Method2Response], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MyService_ServiceDesc.Streams[0], MyService_Method2_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Method2Request, Method2Response]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MyService_Method2Client = grpc.ServerStreamingClient[Method2Response]

func (c *myServiceClient) Method3(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Method3Request, Method3Response], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MyService_ServiceDesc.Streams[1], MyService_Method3_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Method3Request, Method3Response]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MyService_Method3Client = grpc.ClientStreamingClient[Method3Request, Method3Response]

func (c *myServiceClient) StreamMethod(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamMethodRequest, StreamMethodResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MyService_ServiceDesc.Streams[2], MyService_StreamMethod_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamMethodRequest, StreamMethodResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MyService_StreamMethodClient = grpc.BidiStreamingClient[StreamMethodRequest, StreamMethodResponse]

// MyServiceServer is the server API for MyService service.
// All implementations must embed UnimplementedMyServiceServer
// for forward compatibility.
//
// Example service that will be routed through the router
type MyServiceServer interface {
	// Unary RPC
	Method1(context.Context, *Method1Request) (*Method1Response, error)
	// Server streaming RPC
	Method2(*Method2Request, grpc.ServerStreamingServer[Method2Response]) error
	// Client streaming RPC
	Method3(grpc.ClientStreamingServer[Method3Request, Method3Response]) error
	// Bidirectional streaming RPC
	StreamMethod(grpc.BidiStreamingServer[StreamMethodRequest, StreamMethodResponse]) error
	mustEmbedUnimplementedMyServiceServer()
}

// UnimplementedMyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMyServiceServer struct{}

func (UnimplementedMyServiceServer) Method1(context.Context, *Method1Request) (*Method1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Method1 not implemented")
}
func (UnimplementedMyServiceServer) Method2(*Method2Request, grpc.ServerStreamingServer[Method2Response]) error {
	return status.Errorf(codes.Unimplemented, "method Method2 not implemented")
}
func (UnimplementedMyServiceServer) Method3(grpc.ClientStreamingServer[Method3Request, Method3Response]) error {
	return status.Errorf(codes.Unimplemented, "method Method3 not implemented")
}
func (UnimplementedMyServiceServer) StreamMethod(grpc.BidiStreamingServer[StreamMethodRequest, StreamMethodResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamMethod not implemented")
}
func (UnimplementedMyServiceServer) mustEmbedUnimplementedMyServiceServer() {}
func (UnimplementedMyServiceServer) testEmbeddedByValue()                   {}

// UnsafeMyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MyServiceServer will
// result in compilation errors.
type UnsafeMyServiceServer interface {
	mustEmbedUnimplementedMyServiceServer()
}

func RegisterMyServiceServer(s grpc.ServiceRegistrar, srv MyServiceServer) {
	// If the following call pancis, it indicates UnimplementedMyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MyService_ServiceDesc, srv)
}

func _MyService_Method1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Method1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).Method1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyService_Method1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).Method1(ctx, req.(*Method1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_Method2_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Method2Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MyServiceServer).Method2(m, &grpc.GenericServerStream[Method2Request, Method2Response]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MyService_Method2Server = grpc.ServerStreamingServer[Method2Response]

func _MyService_Method3_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MyServiceServer).Method3(&grpc.GenericServerStream[Method3Request, Method3Response]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MyService_Method3Server = grpc.ClientStreamingServer[Method3Request, Method3Response]

func _MyService_StreamMethod_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MyServiceServer).StreamMethod(&grpc.GenericServerStream[StreamMethodRequest, StreamMethodResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MyService_StreamMethodServer = grpc.BidiStreamingServer[StreamMethodRequest, StreamMethodResponse]

// MyService_ServiceDesc is the grpc.ServiceDesc for MyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "myservice.v1.MyService",
	HandlerType: (*MyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Method1",
			Handler:    _MyService_Method1_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Method2",
			Handler:       _MyService_Method2_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Method3",
			Handler:       _MyService_Method3_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamMethod",
			Handler:       _MyService_StreamMethod_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "myservice/v1/service.proto",
}
