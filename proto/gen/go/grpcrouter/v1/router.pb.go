// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: grpcrouter/v1/router.proto

package grpcrouterv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Stream control signals
type StreamControl int32

const (
	// Normal message
	StreamControl_MESSAGE StreamControl = 0
	// Client finished sending (half-close)
	StreamControl_HALF_CLOSE StreamControl = 1
	// Stream completed successfully
	StreamControl_COMPLETE StreamControl = 2
	// Stream aborted with error
	StreamControl_ERROR StreamControl = 3
)

// Enum value maps for StreamControl.
var (
	StreamControl_name = map[int32]string{
		0: "MESSAGE",
		1: "HALF_CLOSE",
		2: "COMPLETE",
		3: "ERROR",
	}
	StreamControl_value = map[string]int32{
		"MESSAGE":    0,
		"HALF_CLOSE": 1,
		"COMPLETE":   2,
		"ERROR":      3,
	}
)

func (x StreamControl) Enum() *StreamControl {
	p := new(StreamControl)
	*p = x
	return p
}

func (x StreamControl) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamControl) Descriptor() protoreflect.EnumDescriptor {
	return file_grpcrouter_v1_router_proto_enumTypes[0].Descriptor()
}

func (StreamControl) Type() protoreflect.EnumType {
	return &file_grpcrouter_v1_router_proto_enumTypes[0]
}

func (x StreamControl) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamControl.Descriptor instead.
func (StreamControl) EnumDescriptor() ([]byte, []int) {
	return file_grpcrouter_v1_router_proto_rawDescGZIP(), []int{0}
}

// RPC method types
type RpcMethodType int32

const (
	RpcMethodType_UNARY                   RpcMethodType = 0
	RpcMethodType_SERVER_STREAMING        RpcMethodType = 1
	RpcMethodType_CLIENT_STREAMING        RpcMethodType = 2
	RpcMethodType_BIDIRECTIONAL_STREAMING RpcMethodType = 3
)

// Enum value maps for RpcMethodType.
var (
	RpcMethodType_name = map[int32]string{
		0: "UNARY",
		1: "SERVER_STREAMING",
		2: "CLIENT_STREAMING",
		3: "BIDIRECTIONAL_STREAMING",
	}
	RpcMethodType_value = map[string]int32{
		"UNARY":                   0,
		"SERVER_STREAMING":        1,
		"CLIENT_STREAMING":        2,
		"BIDIRECTIONAL_STREAMING": 3,
	}
)

func (x RpcMethodType) Enum() *RpcMethodType {
	p := new(RpcMethodType)
	*p = x
	return p
}

func (x RpcMethodType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RpcMethodType) Descriptor() protoreflect.EnumDescriptor {
	return file_grpcrouter_v1_router_proto_enumTypes[1].Descriptor()
}

func (RpcMethodType) Type() protoreflect.EnumType {
	return &file_grpcrouter_v1_router_proto_enumTypes[1]
}

func (x RpcMethodType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RpcMethodType.Descriptor instead.
func (RpcMethodType) EnumDescriptor() ([]byte, []int) {
	return file_grpcrouter_v1_router_proto_rawDescGZIP(), []int{1}
}

// Health status enum
type HealthStatus int32

const (
	HealthStatus_UNKNOWN   HealthStatus = 0
	HealthStatus_HEALTHY   HealthStatus = 1
	HealthStatus_UNHEALTHY HealthStatus = 2
	HealthStatus_STARTING  HealthStatus = 3
	HealthStatus_STOPPING  HealthStatus = 4
)

// Enum value maps for HealthStatus.
var (
	HealthStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "HEALTHY",
		2: "UNHEALTHY",
		3: "STARTING",
		4: "STOPPING",
	}
	HealthStatus_value = map[string]int32{
		"UNKNOWN":   0,
		"HEALTHY":   1,
		"UNHEALTHY": 2,
		"STARTING":  3,
		"STOPPING":  4,
	}
)

func (x HealthStatus) Enum() *HealthStatus {
	p := new(HealthStatus)
	*p = x
	return p
}

func (x HealthStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_grpcrouter_v1_router_proto_enumTypes[2].Descriptor()
}

func (HealthStatus) Type() protoreflect.EnumType {
	return &file_grpcrouter_v1_router_proto_enumTypes[2]
}

func (x HealthStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthStatus.Descriptor instead.
func (HealthStatus) EnumDescriptor() ([]byte, []int) {
	return file_grpcrouter_v1_router_proto_rawDescGZIP(), []int{2}
}

// Registration request from service instances
type RegisterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Request:
	//
	//	*RegisterRequest_InstanceInfo
	//	*RegisterRequest_Heartbeat
	//	*RegisterRequest_Unregister
	//	*RegisterRequest_RpcResponse
	Request       isRegisterRequest_Request `protobuf_oneof:"request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	mi := &file_grpcrouter_v1_router_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpcrouter_v1_router_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_grpcrouter_v1_router_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterRequest) GetRequest() isRegisterRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *RegisterRequest) GetInstanceInfo() *InstanceInfo {
	if x != nil {
		if x, ok := x.Request.(*RegisterRequest_InstanceInfo); ok {
			return x.InstanceInfo
		}
	}
	return nil
}

func (x *RegisterRequest) GetHeartbeat() *Heartbeat {
	if x != nil {
		if x, ok := x.Request.(*RegisterRequest_Heartbeat); ok {
			return x.Heartbeat
		}
	}
	return nil
}

func (x *RegisterRequest) GetUnregister() *UnregisterRequest {
	if x != nil {
		if x, ok := x.Request.(*RegisterRequest_Unregister); ok {
			return x.Unregister
		}
	}
	return nil
}

func (x *RegisterRequest) GetRpcResponse() *RpcResponse {
	if x != nil {
		if x, ok := x.Request.(*RegisterRequest_RpcResponse); ok {
			return x.RpcResponse
		}
	}
	return nil
}

type isRegisterRequest_Request interface {
	isRegisterRequest_Request()
}

type RegisterRequest_InstanceInfo struct {
	// Initial registration
	InstanceInfo *InstanceInfo `protobuf:"bytes,1,opt,name=instance_info,json=instanceInfo,proto3,oneof"`
}

type RegisterRequest_Heartbeat struct {
	// Keepalive heartbeat
	Heartbeat *Heartbeat `protobuf:"bytes,2,opt,name=heartbeat,proto3,oneof"`
}

type RegisterRequest_Unregister struct {
	// Unregister instance
	Unregister *UnregisterRequest `protobuf:"bytes,3,opt,name=unregister,proto3,oneof"`
}

type RegisterRequest_RpcResponse struct {
	// RPC response from service back to gateway
	RpcResponse *RpcResponse `protobuf:"bytes,4,opt,name=rpc_response,json=rpcResponse,proto3,oneof"`
}

func (*RegisterRequest_InstanceInfo) isRegisterRequest_Request() {}

func (*RegisterRequest_Heartbeat) isRegisterRequest_Request() {}

func (*RegisterRequest_Unregister) isRegisterRequest_Request() {}

func (*RegisterRequest_RpcResponse) isRegisterRequest_Request() {}

// Registration response to service instances
type RegisterResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*RegisterResponse_Ack
	//	*RegisterResponse_RpcCall
	//	*RegisterResponse_Error
	Response      isRegisterResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterResponse) Reset() {
	*x = RegisterResponse{}
	mi := &file_grpcrouter_v1_router_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResponse) ProtoMessage() {}

func (x *RegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpcrouter_v1_router_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResponse.ProtoReflect.Descriptor instead.
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return file_grpcrouter_v1_router_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterResponse) GetResponse() isRegisterResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *RegisterResponse) GetAck() *RegistrationAck {
	if x != nil {
		if x, ok := x.Response.(*RegisterResponse_Ack); ok {
			return x.Ack
		}
	}
	return nil
}

func (x *RegisterResponse) GetRpcCall() *RpcCall {
	if x != nil {
		if x, ok := x.Response.(*RegisterResponse_RpcCall); ok {
			return x.RpcCall
		}
	}
	return nil
}

func (x *RegisterResponse) GetError() *ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*RegisterResponse_Error); ok {
			return x.Error
		}
	}
	return nil
}

type isRegisterResponse_Response interface {
	isRegisterResponse_Response()
}

type RegisterResponse_Ack struct {
	// Registration acknowledgment
	Ack *RegistrationAck `protobuf:"bytes,1,opt,name=ack,proto3,oneof"`
}

type RegisterResponse_RpcCall struct {
	// RPC call from gateway to service
	RpcCall *RpcCall `protobuf:"bytes,2,opt,name=rpc_call,json=rpcCall,proto3,oneof"`
}

type RegisterResponse_Error struct {
	// Error response
	Error *ErrorResponse `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*RegisterResponse_Ack) isRegisterResponse_Response() {}

func (*RegisterResponse_RpcCall) isRegisterResponse_Response() {}

func (*RegisterResponse_Error) isRegisterResponse_Response() {}

// Instance information for registration
type InstanceInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique instance identifier
	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// Service name this instance provides
	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Instance endpoint (host:port)
	Endpoint string `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Instance metadata
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Instance health status
	HealthStatus HealthStatus `protobuf:"varint,5,opt,name=health_status,json=healthStatus,proto3,enum=grpcrouter.v1.HealthStatus" json:"health_status,omitempty"`
	// Registration timestamp
	RegisteredAt  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=registered_at,json=registeredAt,proto3" json:"registered_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InstanceInfo) Reset() {
	*x = InstanceInfo{}
	mi := &file_grpcrouter_v1_router_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstanceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceInfo) ProtoMessage() {}

func (x *InstanceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_grpcrouter_v1_router_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceInfo.ProtoReflect.Descriptor instead.
func (*InstanceInfo) Descriptor() ([]byte, []int) {
	return file_grpcrouter_v1_router_proto_rawDescGZIP(), []int{2}
}

func (x *InstanceInfo) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *InstanceInfo) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *InstanceInfo) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *InstanceInfo) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *InstanceInfo) GetHealthStatus() HealthStatus {
	if x != nil {
		return x.HealthStatus
	}
	return HealthStatus_UNKNOWN
}

func (x *InstanceInfo) GetRegisteredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RegisteredAt
	}
	return nil
}

// Heartbeat message for keepalive
type Heartbeat struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InstanceId    string                 `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	HealthStatus  HealthStatus           `protobuf:"varint,3,opt,name=health_status,json=healthStatus,proto3,enum=grpcrouter.v1.HealthStatus" json:"health_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Heartbeat) Reset() {
	*x = Heartbeat{}
	mi := &file_grpcrouter_v1_router_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Heartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartbeat) ProtoMessage() {}

func (x *Heartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_grpcrouter_v1_router_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartbeat.ProtoReflect.Descriptor instead.
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return file_grpcrouter_v1_router_proto_rawDescGZIP(), []int{3}
}

func (x *Heartbeat) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *Heartbeat) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Heartbeat) GetHealthStatus() HealthStatus {
	if x != nil {
		return x.HealthStatus
	}
	return HealthStatus_UNKNOWN
}

// Unregister request
type UnregisterRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InstanceId    string                 `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Reason        string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnregisterRequest) Reset() {
	*x = UnregisterRequest{}
	mi := &file_grpcrouter_v1_router_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnregisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnregisterRequest) ProtoMessage() {}

func (x *UnregisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpcrouter_v1_router_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnregisterRequest.ProtoReflect.Descriptor instead.
func (*UnregisterRequest) Descriptor() ([]byte, []int) {
	return file_grpcrouter_v1_router_proto_rawDescGZIP(), []int{4}
}

func (x *UnregisterRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *UnregisterRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// Registration acknowledgment
type RegistrationAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InstanceId    string                 `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegistrationAck) Reset() {
	*x = RegistrationAck{}
	mi := &file_grpcrouter_v1_router_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegistrationAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationAck) ProtoMessage() {}

func (x *RegistrationAck) ProtoReflect() protoreflect.Message {
	mi := &file_grpcrouter_v1_router_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationAck.ProtoReflect.Descriptor instead.
func (*RegistrationAck) Descriptor() ([]byte, []int) {
	return file_grpcrouter_v1_router_proto_rawDescGZIP(), []int{5}
}

func (x *RegistrationAck) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *RegistrationAck) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RegistrationAck) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// RPC call from gateway to service instance
type RpcCall struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique request ID for correlation
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Method name (e.g., "/myservice.MyService/Method1")
	Method string `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	// Method type for streaming handling
	MethodType RpcMethodType `protobuf:"varint,3,opt,name=method_type,json=methodType,proto3,enum=grpcrouter.v1.RpcMethodType" json:"method_type,omitempty"`
	// gRPC metadata
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Request timeout
	Timeout *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Types that are valid to be assigned to Payload:
	//
	//	*RpcCall_Request
	//	*RpcCall_StreamMessage
	Payload       isRpcCall_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RpcCall) Reset() {
	*x = RpcCall{}
	mi := &file_grpcrouter_v1_router_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RpcCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcCall) ProtoMessage() {}

func (x *RpcCall) ProtoReflect() protoreflect.Message {
	mi := &file_grpcrouter_v1_router_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcCall.ProtoReflect.Descriptor instead.
func (*RpcCall) Descriptor() ([]byte, []int) {
	return file_grpcrouter_v1_router_proto_rawDescGZIP(), []int{6}
}

func (x *RpcCall) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *RpcCall) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *RpcCall) GetMethodType() RpcMethodType {
	if x != nil {
		return x.MethodType
	}
	return RpcMethodType_UNARY
}

func (x *RpcCall) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RpcCall) GetTimeout() *timestamppb.Timestamp {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *RpcCall) GetPayload() isRpcCall_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *RpcCall) GetRequest() *anypb.Any {
	if x != nil {
		if x, ok := x.Payload.(*RpcCall_Request); ok {
			return x.Request
		}
	}
	return nil
}

func (x *RpcCall) GetStreamMessage() *StreamMessage {
	if x != nil {
		if x, ok := x.Payload.(*RpcCall_StreamMessage); ok {
			return x.StreamMessage
		}
	}
	return nil
}

type isRpcCall_Payload interface {
	isRpcCall_Payload()
}

type RpcCall_Request struct {
	// For unary and server streaming: single request
	Request *anypb.Any `protobuf:"bytes,6,opt,name=request,proto3,oneof"`
}

type RpcCall_StreamMessage struct {
	// For client and bidirectional streaming: stream message
	StreamMessage *StreamMessage `protobuf:"bytes,7,opt,name=stream_message,json=streamMessage,proto3,oneof"`
}

func (*RpcCall_Request) isRpcCall_Payload() {}

func (*RpcCall_StreamMessage) isRpcCall_Payload() {}

// RPC response from service instance to gateway
type RpcResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Request ID for correlation
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// gRPC metadata
	Metadata map[string]string `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Status (success/error) - sent when RPC completes
	Status *RpcStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// Types that are valid to be assigned to Payload:
	//
	//	*RpcResponse_Response
	//	*RpcResponse_StreamMessage
	Payload       isRpcResponse_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RpcResponse) Reset() {
	*x = RpcResponse{}
	mi := &file_grpcrouter_v1_router_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RpcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcResponse) ProtoMessage() {}

func (x *RpcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpcrouter_v1_router_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcResponse.ProtoReflect.Descriptor instead.
func (*RpcResponse) Descriptor() ([]byte, []int) {
	return file_grpcrouter_v1_router_proto_rawDescGZIP(), []int{7}
}

func (x *RpcResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *RpcResponse) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RpcResponse) GetStatus() *RpcStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *RpcResponse) GetPayload() isRpcResponse_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *RpcResponse) GetResponse() *anypb.Any {
	if x != nil {
		if x, ok := x.Payload.(*RpcResponse_Response); ok {
			return x.Response
		}
	}
	return nil
}

func (x *RpcResponse) GetStreamMessage() *StreamMessage {
	if x != nil {
		if x, ok := x.Payload.(*RpcResponse_StreamMessage); ok {
			return x.StreamMessage
		}
	}
	return nil
}

type isRpcResponse_Payload interface {
	isRpcResponse_Payload()
}

type RpcResponse_Response struct {
	// For unary and client streaming: single response
	Response *anypb.Any `protobuf:"bytes,4,opt,name=response,proto3,oneof"`
}

type RpcResponse_StreamMessage struct {
	// For server and bidirectional streaming: stream message
	StreamMessage *StreamMessage `protobuf:"bytes,5,opt,name=stream_message,json=streamMessage,proto3,oneof"`
}

func (*RpcResponse_Response) isRpcResponse_Payload() {}

func (*RpcResponse_StreamMessage) isRpcResponse_Payload() {}

// Stream message for handling streaming RPCs
type StreamMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Sequence number for ordering
	Sequence int64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Message payload
	Message *anypb.Any `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Stream control signals
	Control       StreamControl `protobuf:"varint,3,opt,name=control,proto3,enum=grpcrouter.v1.StreamControl" json:"control,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamMessage) Reset() {
	*x = StreamMessage{}
	mi := &file_grpcrouter_v1_router_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMessage) ProtoMessage() {}

func (x *StreamMessage) ProtoReflect() protoreflect.Message {
	mi := &file_grpcrouter_v1_router_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMessage.ProtoReflect.Descriptor instead.
func (*StreamMessage) Descriptor() ([]byte, []int) {
	return file_grpcrouter_v1_router_proto_rawDescGZIP(), []int{8}
}

func (x *StreamMessage) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *StreamMessage) GetMessage() *anypb.Any {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *StreamMessage) GetControl() StreamControl {
	if x != nil {
		return x.Control
	}
	return StreamControl_MESSAGE
}

// RPC status information
type RpcStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Details       []*anypb.Any           `protobuf:"bytes,3,rep,name=details,proto3" json:"details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RpcStatus) Reset() {
	*x = RpcStatus{}
	mi := &file_grpcrouter_v1_router_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RpcStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcStatus) ProtoMessage() {}

func (x *RpcStatus) ProtoReflect() protoreflect.Message {
	mi := &file_grpcrouter_v1_router_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcStatus.ProtoReflect.Descriptor instead.
func (*RpcStatus) Descriptor() ([]byte, []int) {
	return file_grpcrouter_v1_router_proto_rawDescGZIP(), []int{9}
}

func (x *RpcStatus) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RpcStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RpcStatus) GetDetails() []*anypb.Any {
	if x != nil {
		return x.Details
	}
	return nil
}

// Error response
type ErrorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Details       string                 `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorResponse) Reset() {
	*x = ErrorResponse{}
	mi := &file_grpcrouter_v1_router_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResponse) ProtoMessage() {}

func (x *ErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpcrouter_v1_router_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResponse.ProtoReflect.Descriptor instead.
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return file_grpcrouter_v1_router_proto_rawDescGZIP(), []int{10}
}

func (x *ErrorResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ErrorResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ErrorResponse) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

// Health check request
type HealthCheckRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InstanceId    string                 `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	mi := &file_grpcrouter_v1_router_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpcrouter_v1_router_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_grpcrouter_v1_router_proto_rawDescGZIP(), []int{11}
}

func (x *HealthCheckRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

// Health check response
type HealthCheckResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InstanceId    string                 `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Status        HealthStatus           `protobuf:"varint,2,opt,name=status,proto3,enum=grpcrouter.v1.HealthStatus" json:"status,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	mi := &file_grpcrouter_v1_router_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpcrouter_v1_router_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_grpcrouter_v1_router_proto_rawDescGZIP(), []int{12}
}

func (x *HealthCheckResponse) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *HealthCheckResponse) GetStatus() HealthStatus {
	if x != nil {
		return x.Status
	}
	return HealthStatus_UNKNOWN
}

func (x *HealthCheckResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// List instances request
type ListInstancesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServiceName   string                 `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	StatusFilter  HealthStatus           `protobuf:"varint,2,opt,name=status_filter,json=statusFilter,proto3,enum=grpcrouter.v1.HealthStatus" json:"status_filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListInstancesRequest) Reset() {
	*x = ListInstancesRequest{}
	mi := &file_grpcrouter_v1_router_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListInstancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstancesRequest) ProtoMessage() {}

func (x *ListInstancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpcrouter_v1_router_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstancesRequest.ProtoReflect.Descriptor instead.
func (*ListInstancesRequest) Descriptor() ([]byte, []int) {
	return file_grpcrouter_v1_router_proto_rawDescGZIP(), []int{13}
}

func (x *ListInstancesRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ListInstancesRequest) GetStatusFilter() HealthStatus {
	if x != nil {
		return x.StatusFilter
	}
	return HealthStatus_UNKNOWN
}

// List instances response
type ListInstancesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Instances     []*InstanceInfo        `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListInstancesResponse) Reset() {
	*x = ListInstancesResponse{}
	mi := &file_grpcrouter_v1_router_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListInstancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstancesResponse) ProtoMessage() {}

func (x *ListInstancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpcrouter_v1_router_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstancesResponse.ProtoReflect.Descriptor instead.
func (*ListInstancesResponse) Descriptor() ([]byte, []int) {
	return file_grpcrouter_v1_router_proto_rawDescGZIP(), []int{14}
}

func (x *ListInstancesResponse) GetInstances() []*InstanceInfo {
	if x != nil {
		return x.Instances
	}
	return nil
}

var File_grpcrouter_v1_router_proto protoreflect.FileDescriptor

const file_grpcrouter_v1_router_proto_rawDesc = "" +
	"\n" +
	"\x1agrpcrouter/v1/router.proto\x12\rgrpcrouter.v1\x1a\x19google/protobuf/any.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x9f\x02\n" +
	"\x0fRegisterRequest\x12B\n" +
	"\rinstance_info\x18\x01 \x01(\v2\x1b.grpcrouter.v1.InstanceInfoH\x00R\finstanceInfo\x128\n" +
	"\theartbeat\x18\x02 \x01(\v2\x18.grpcrouter.v1.HeartbeatH\x00R\theartbeat\x12B\n" +
	"\n" +
	"unregister\x18\x03 \x01(\v2 .grpcrouter.v1.UnregisterRequestH\x00R\n" +
	"unregister\x12?\n" +
	"\frpc_response\x18\x04 \x01(\v2\x1a.grpcrouter.v1.RpcResponseH\x00R\vrpcResponseB\t\n" +
	"\arequest\"\xbd\x01\n" +
	"\x10RegisterResponse\x122\n" +
	"\x03ack\x18\x01 \x01(\v2\x1e.grpcrouter.v1.RegistrationAckH\x00R\x03ack\x123\n" +
	"\brpc_call\x18\x02 \x01(\v2\x16.grpcrouter.v1.RpcCallH\x00R\arpcCall\x124\n" +
	"\x05error\x18\x03 \x01(\v2\x1c.grpcrouter.v1.ErrorResponseH\x00R\x05errorB\n" +
	"\n" +
	"\bresponse\"\xf5\x02\n" +
	"\fInstanceInfo\x12\x1f\n" +
	"\vinstance_id\x18\x01 \x01(\tR\n" +
	"instanceId\x12!\n" +
	"\fservice_name\x18\x02 \x01(\tR\vserviceName\x12\x1a\n" +
	"\bendpoint\x18\x03 \x01(\tR\bendpoint\x12E\n" +
	"\bmetadata\x18\x04 \x03(\v2).grpcrouter.v1.InstanceInfo.MetadataEntryR\bmetadata\x12@\n" +
	"\rhealth_status\x18\x05 \x01(\x0e2\x1b.grpcrouter.v1.HealthStatusR\fhealthStatus\x12?\n" +
	"\rregistered_at\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\fregisteredAt\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xa8\x01\n" +
	"\tHeartbeat\x12\x1f\n" +
	"\vinstance_id\x18\x01 \x01(\tR\n" +
	"instanceId\x128\n" +
	"\ttimestamp\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12@\n" +
	"\rhealth_status\x18\x03 \x01(\x0e2\x1b.grpcrouter.v1.HealthStatusR\fhealthStatus\"L\n" +
	"\x11UnregisterRequest\x12\x1f\n" +
	"\vinstance_id\x18\x01 \x01(\tR\n" +
	"instanceId\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\tR\x06reason\"f\n" +
	"\x0fRegistrationAck\x12\x1f\n" +
	"\vinstance_id\x18\x01 \x01(\tR\n" +
	"instanceId\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\"\xb8\x03\n" +
	"\aRpcCall\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\tR\trequestId\x12\x16\n" +
	"\x06method\x18\x02 \x01(\tR\x06method\x12=\n" +
	"\vmethod_type\x18\x03 \x01(\x0e2\x1c.grpcrouter.v1.RpcMethodTypeR\n" +
	"methodType\x12@\n" +
	"\bmetadata\x18\x04 \x03(\v2$.grpcrouter.v1.RpcCall.MetadataEntryR\bmetadata\x124\n" +
	"\atimeout\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\atimeout\x120\n" +
	"\arequest\x18\x06 \x01(\v2\x14.google.protobuf.AnyH\x00R\arequest\x12E\n" +
	"\x0estream_message\x18\a \x01(\v2\x1c.grpcrouter.v1.StreamMessageH\x00R\rstreamMessage\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\t\n" +
	"\apayload\"\xe7\x02\n" +
	"\vRpcResponse\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\tR\trequestId\x12D\n" +
	"\bmetadata\x18\x02 \x03(\v2(.grpcrouter.v1.RpcResponse.MetadataEntryR\bmetadata\x120\n" +
	"\x06status\x18\x03 \x01(\v2\x18.grpcrouter.v1.RpcStatusR\x06status\x122\n" +
	"\bresponse\x18\x04 \x01(\v2\x14.google.protobuf.AnyH\x00R\bresponse\x12E\n" +
	"\x0estream_message\x18\x05 \x01(\v2\x1c.grpcrouter.v1.StreamMessageH\x00R\rstreamMessage\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\t\n" +
	"\apayload\"\x93\x01\n" +
	"\rStreamMessage\x12\x1a\n" +
	"\bsequence\x18\x01 \x01(\x03R\bsequence\x12.\n" +
	"\amessage\x18\x02 \x01(\v2\x14.google.protobuf.AnyR\amessage\x126\n" +
	"\acontrol\x18\x03 \x01(\x0e2\x1c.grpcrouter.v1.StreamControlR\acontrol\"i\n" +
	"\tRpcStatus\x12\x12\n" +
	"\x04code\x18\x01 \x01(\x05R\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12.\n" +
	"\adetails\x18\x03 \x03(\v2\x14.google.protobuf.AnyR\adetails\"W\n" +
	"\rErrorResponse\x12\x12\n" +
	"\x04code\x18\x01 \x01(\x05R\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x18\n" +
	"\adetails\x18\x03 \x01(\tR\adetails\"5\n" +
	"\x12HealthCheckRequest\x12\x1f\n" +
	"\vinstance_id\x18\x01 \x01(\tR\n" +
	"instanceId\"\x85\x01\n" +
	"\x13HealthCheckResponse\x12\x1f\n" +
	"\vinstance_id\x18\x01 \x01(\tR\n" +
	"instanceId\x123\n" +
	"\x06status\x18\x02 \x01(\x0e2\x1b.grpcrouter.v1.HealthStatusR\x06status\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\"{\n" +
	"\x14ListInstancesRequest\x12!\n" +
	"\fservice_name\x18\x01 \x01(\tR\vserviceName\x12@\n" +
	"\rstatus_filter\x18\x02 \x01(\x0e2\x1b.grpcrouter.v1.HealthStatusR\fstatusFilter\"R\n" +
	"\x15ListInstancesResponse\x129\n" +
	"\tinstances\x18\x01 \x03(\v2\x1b.grpcrouter.v1.InstanceInfoR\tinstances*E\n" +
	"\rStreamControl\x12\v\n" +
	"\aMESSAGE\x10\x00\x12\x0e\n" +
	"\n" +
	"HALF_CLOSE\x10\x01\x12\f\n" +
	"\bCOMPLETE\x10\x02\x12\t\n" +
	"\x05ERROR\x10\x03*c\n" +
	"\rRpcMethodType\x12\t\n" +
	"\x05UNARY\x10\x00\x12\x14\n" +
	"\x10SERVER_STREAMING\x10\x01\x12\x14\n" +
	"\x10CLIENT_STREAMING\x10\x02\x12\x1b\n" +
	"\x17BIDIRECTIONAL_STREAMING\x10\x03*S\n" +
	"\fHealthStatus\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\v\n" +
	"\aHEALTHY\x10\x01\x12\r\n" +
	"\tUNHEALTHY\x10\x02\x12\f\n" +
	"\bSTARTING\x10\x03\x12\f\n" +
	"\bSTOPPING\x10\x042\x8b\x02\n" +
	"\x06Router\x12O\n" +
	"\bRegister\x12\x1e.grpcrouter.v1.RegisterRequest\x1a\x1f.grpcrouter.v1.RegisterResponse(\x010\x01\x12T\n" +
	"\vHealthCheck\x12!.grpcrouter.v1.HealthCheckRequest\x1a\".grpcrouter.v1.HealthCheckResponse\x12Z\n" +
	"\rListInstances\x12#.grpcrouter.v1.ListInstancesRequest\x1a$.grpcrouter.v1.ListInstancesResponseB\xbc\x01\n" +
	"\x11com.grpcrouter.v1B\vRouterProtoP\x01ZEgithub.com/panyam/protoc-gen-go-grpcrouter/grpcrouter/v1;grpcrouterv1\xa2\x02\x03GXX\xaa\x02\rGrpcrouter.V1\xca\x02\rGrpcrouter\\V1\xe2\x02\x19Grpcrouter\\V1\\GPBMetadata\xea\x02\x0eGrpcrouter::V1b\x06proto3"

var (
	file_grpcrouter_v1_router_proto_rawDescOnce sync.Once
	file_grpcrouter_v1_router_proto_rawDescData []byte
)

func file_grpcrouter_v1_router_proto_rawDescGZIP() []byte {
	file_grpcrouter_v1_router_proto_rawDescOnce.Do(func() {
		file_grpcrouter_v1_router_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_grpcrouter_v1_router_proto_rawDesc), len(file_grpcrouter_v1_router_proto_rawDesc)))
	})
	return file_grpcrouter_v1_router_proto_rawDescData
}

var file_grpcrouter_v1_router_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_grpcrouter_v1_router_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_grpcrouter_v1_router_proto_goTypes = []any{
	(StreamControl)(0),            // 0: grpcrouter.v1.StreamControl
	(RpcMethodType)(0),            // 1: grpcrouter.v1.RpcMethodType
	(HealthStatus)(0),             // 2: grpcrouter.v1.HealthStatus
	(*RegisterRequest)(nil),       // 3: grpcrouter.v1.RegisterRequest
	(*RegisterResponse)(nil),      // 4: grpcrouter.v1.RegisterResponse
	(*InstanceInfo)(nil),          // 5: grpcrouter.v1.InstanceInfo
	(*Heartbeat)(nil),             // 6: grpcrouter.v1.Heartbeat
	(*UnregisterRequest)(nil),     // 7: grpcrouter.v1.UnregisterRequest
	(*RegistrationAck)(nil),       // 8: grpcrouter.v1.RegistrationAck
	(*RpcCall)(nil),               // 9: grpcrouter.v1.RpcCall
	(*RpcResponse)(nil),           // 10: grpcrouter.v1.RpcResponse
	(*StreamMessage)(nil),         // 11: grpcrouter.v1.StreamMessage
	(*RpcStatus)(nil),             // 12: grpcrouter.v1.RpcStatus
	(*ErrorResponse)(nil),         // 13: grpcrouter.v1.ErrorResponse
	(*HealthCheckRequest)(nil),    // 14: grpcrouter.v1.HealthCheckRequest
	(*HealthCheckResponse)(nil),   // 15: grpcrouter.v1.HealthCheckResponse
	(*ListInstancesRequest)(nil),  // 16: grpcrouter.v1.ListInstancesRequest
	(*ListInstancesResponse)(nil), // 17: grpcrouter.v1.ListInstancesResponse
	nil,                           // 18: grpcrouter.v1.InstanceInfo.MetadataEntry
	nil,                           // 19: grpcrouter.v1.RpcCall.MetadataEntry
	nil,                           // 20: grpcrouter.v1.RpcResponse.MetadataEntry
	(*timestamppb.Timestamp)(nil), // 21: google.protobuf.Timestamp
	(*anypb.Any)(nil),             // 22: google.protobuf.Any
}
var file_grpcrouter_v1_router_proto_depIdxs = []int32{
	5,  // 0: grpcrouter.v1.RegisterRequest.instance_info:type_name -> grpcrouter.v1.InstanceInfo
	6,  // 1: grpcrouter.v1.RegisterRequest.heartbeat:type_name -> grpcrouter.v1.Heartbeat
	7,  // 2: grpcrouter.v1.RegisterRequest.unregister:type_name -> grpcrouter.v1.UnregisterRequest
	10, // 3: grpcrouter.v1.RegisterRequest.rpc_response:type_name -> grpcrouter.v1.RpcResponse
	8,  // 4: grpcrouter.v1.RegisterResponse.ack:type_name -> grpcrouter.v1.RegistrationAck
	9,  // 5: grpcrouter.v1.RegisterResponse.rpc_call:type_name -> grpcrouter.v1.RpcCall
	13, // 6: grpcrouter.v1.RegisterResponse.error:type_name -> grpcrouter.v1.ErrorResponse
	18, // 7: grpcrouter.v1.InstanceInfo.metadata:type_name -> grpcrouter.v1.InstanceInfo.MetadataEntry
	2,  // 8: grpcrouter.v1.InstanceInfo.health_status:type_name -> grpcrouter.v1.HealthStatus
	21, // 9: grpcrouter.v1.InstanceInfo.registered_at:type_name -> google.protobuf.Timestamp
	21, // 10: grpcrouter.v1.Heartbeat.timestamp:type_name -> google.protobuf.Timestamp
	2,  // 11: grpcrouter.v1.Heartbeat.health_status:type_name -> grpcrouter.v1.HealthStatus
	1,  // 12: grpcrouter.v1.RpcCall.method_type:type_name -> grpcrouter.v1.RpcMethodType
	19, // 13: grpcrouter.v1.RpcCall.metadata:type_name -> grpcrouter.v1.RpcCall.MetadataEntry
	21, // 14: grpcrouter.v1.RpcCall.timeout:type_name -> google.protobuf.Timestamp
	22, // 15: grpcrouter.v1.RpcCall.request:type_name -> google.protobuf.Any
	11, // 16: grpcrouter.v1.RpcCall.stream_message:type_name -> grpcrouter.v1.StreamMessage
	20, // 17: grpcrouter.v1.RpcResponse.metadata:type_name -> grpcrouter.v1.RpcResponse.MetadataEntry
	12, // 18: grpcrouter.v1.RpcResponse.status:type_name -> grpcrouter.v1.RpcStatus
	22, // 19: grpcrouter.v1.RpcResponse.response:type_name -> google.protobuf.Any
	11, // 20: grpcrouter.v1.RpcResponse.stream_message:type_name -> grpcrouter.v1.StreamMessage
	22, // 21: grpcrouter.v1.StreamMessage.message:type_name -> google.protobuf.Any
	0,  // 22: grpcrouter.v1.StreamMessage.control:type_name -> grpcrouter.v1.StreamControl
	22, // 23: grpcrouter.v1.RpcStatus.details:type_name -> google.protobuf.Any
	2,  // 24: grpcrouter.v1.HealthCheckResponse.status:type_name -> grpcrouter.v1.HealthStatus
	2,  // 25: grpcrouter.v1.ListInstancesRequest.status_filter:type_name -> grpcrouter.v1.HealthStatus
	5,  // 26: grpcrouter.v1.ListInstancesResponse.instances:type_name -> grpcrouter.v1.InstanceInfo
	3,  // 27: grpcrouter.v1.Router.Register:input_type -> grpcrouter.v1.RegisterRequest
	14, // 28: grpcrouter.v1.Router.HealthCheck:input_type -> grpcrouter.v1.HealthCheckRequest
	16, // 29: grpcrouter.v1.Router.ListInstances:input_type -> grpcrouter.v1.ListInstancesRequest
	4,  // 30: grpcrouter.v1.Router.Register:output_type -> grpcrouter.v1.RegisterResponse
	15, // 31: grpcrouter.v1.Router.HealthCheck:output_type -> grpcrouter.v1.HealthCheckResponse
	17, // 32: grpcrouter.v1.Router.ListInstances:output_type -> grpcrouter.v1.ListInstancesResponse
	30, // [30:33] is the sub-list for method output_type
	27, // [27:30] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_grpcrouter_v1_router_proto_init() }
func file_grpcrouter_v1_router_proto_init() {
	if File_grpcrouter_v1_router_proto != nil {
		return
	}
	file_grpcrouter_v1_router_proto_msgTypes[0].OneofWrappers = []any{
		(*RegisterRequest_InstanceInfo)(nil),
		(*RegisterRequest_Heartbeat)(nil),
		(*RegisterRequest_Unregister)(nil),
		(*RegisterRequest_RpcResponse)(nil),
	}
	file_grpcrouter_v1_router_proto_msgTypes[1].OneofWrappers = []any{
		(*RegisterResponse_Ack)(nil),
		(*RegisterResponse_RpcCall)(nil),
		(*RegisterResponse_Error)(nil),
	}
	file_grpcrouter_v1_router_proto_msgTypes[6].OneofWrappers = []any{
		(*RpcCall_Request)(nil),
		(*RpcCall_StreamMessage)(nil),
	}
	file_grpcrouter_v1_router_proto_msgTypes[7].OneofWrappers = []any{
		(*RpcResponse_Response)(nil),
		(*RpcResponse_StreamMessage)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_grpcrouter_v1_router_proto_rawDesc), len(file_grpcrouter_v1_router_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_grpcrouter_v1_router_proto_goTypes,
		DependencyIndexes: file_grpcrouter_v1_router_proto_depIdxs,
		EnumInfos:         file_grpcrouter_v1_router_proto_enumTypes,
		MessageInfos:      file_grpcrouter_v1_router_proto_msgTypes,
	}.Build()
	File_grpcrouter_v1_router_proto = out.File
	file_grpcrouter_v1_router_proto_goTypes = nil
	file_grpcrouter_v1_router_proto_depIdxs = nil
}
